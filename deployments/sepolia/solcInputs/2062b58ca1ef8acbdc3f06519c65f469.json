{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Allow users to send funds into contract\n// Enable withdraw funds from contract by contract onwer\n// Set minimum funding value in USD\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\nimport {PriceConverter} from \"./PriceConverter.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n//error FundMe__NotOwner();\n\n// before update: 691543 gas (transaction cost), 596263 (execution cost) \n// first update:  668404 gas (transaction cost), 573350 (execution cost)\n// second update: 645273 gas (trransaction cost), 550841 (execution cost)\ncontract FundMe {\n    using PriceConverter for uint256;\n    uint public constant MINIMUM_USD = 5; // first update (make constant - 23000 gas), second update (capitalize to constant-like view)\n    address[] s_funders;\n    mapping(address funder => uint256 amount) s_funderToAmount;\n\n    address public /* immutable */ i_owner; // second update (make immutable - 417 gas, before - 2522 gas)\n    AggregatorV3Interface public s_priceFeed;\n\n    constructor(address priceFeedAddress_){\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress_);\n    }\n\n    modifier isOwner() {\n        //require(msg.sender == i_owner, \"Sender is not owner\");\n        if(msg.sender != i_owner) {\n            revert(\"Not owner\");\n        }\n        _;\n    }\n\n    function fund() payable public{\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \"didn`t send enough funds\");\n        s_funders.push(msg.sender);\n        s_funderToAmount[msg.sender] += msg.value;\n    }\n    function withdraw() public isOwner{\n        uint256 funders_length = s_funders.length;\n        for (uint256 funderIndex = 0; funderIndex < funders_length; funderIndex++) \n        {\n            address funder = s_funders[funderIndex];\n            s_funderToAmount[funder] = 0;\n        }\n        s_funders = new address[](0);\n\n        (bool callSuccess, /*bytes memory data*/) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n    \n    receive() external payable { \n        fund();\n    }\n\n    fallback() external payable { \n        fund();\n    }\n\n    function getFunderToAmount(address funder_) public view returns(uint256){\n        return s_funderToAmount[funder_];\n    }\n\n    function getFunder(uint index_) public view returns(address){\n        return s_funders[index_];\n    }\n\n    function getVersion() public view returns (uint256) {\n        return s_priceFeed.version();\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getPriceFeed() public view returns(AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n\nlibrary PriceConverter {\nfunction getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\n        /* AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\n        */\n        (, int256 price,,,) = priceFeed.latestRoundData();\n        return uint(price*1e10);\n    }\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256){\n        uint256 price = getPrice(priceFeed);\n        uint256 ethAmountToUsd = (price*ethAmount)/1e18;\n        return ethAmountToUsd;\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}